`timescale 1ns/1ps
// ============================================================================
// Testbench (no hierarchical references)
//  - For Renesas ForgeFPGA Go Configure simulation + GTKWave
//  - DUT: top_example  （DUT RTLを必ずプロジェクトに追加してからTBを追加）
// ============================================================================
module xbitshifter_single_tb;
  // DUT I/O
  reg  clk    = 1'b0;
  reg  rst    = 1'b1;  // 外部リセット：まず1で開始
  reg  btn_raw= 1'b0;
  reg  in_bit = 1'b0;
  wire out;

  // DUT instance
  xbitshifter_single dut (
    .clk    (clk),
    .rst    (rst),
    .btn_raw(btn_raw),
    .in_bit (in_bit),
    .out    (out)
  );

  // 50MHz clock (20ns period)
  always #10 clk = ~clk;

  // VCD dump (GTKWave)
  initial begin
    $dumpfile("xbitshifter_single_tb.vcd");
    $dumpvars(0, xbitshifter_single_tb);
  end

  // in_bit generator
  // - リセット解除後、少し待ってから毎クロックでトグル開始
  // - DUT内部の同期済みリセットには触れず、外部rstだけで制御
  reg [15:0] start_cnt = 16'd0;
  reg        start_toggle = 1'b0;
  always @(posedge clk) begin
    if (rst) begin
      start_cnt    <= 16'd0;
      start_toggle <= 1'b0;
      in_bit       <= 1'b0;
    end else begin
      if (!start_toggle) begin
        start_cnt <= start_cnt + 16'd1;
        if (start_cnt == 16'd50) begin
          start_toggle <= 1'b1; // リセット解除後 50 サイクル待ってから開始
        end
      end else begin
        in_bit <= ~in_bit; // トグル（1010…）
      end
    end
  end

  // ボタン押下タスク：N=128 を満たす 150 サイクル保持
  task press_button(input integer stable_cycles);
    begin
      btn_raw <= 1'b1;
      repeat (stable_cycles) @(posedge clk);
      btn_raw <= 1'b0;
      repeat (stable_cycles) @(posedge clk); // 次の操作まで間を空ける
    end
  endtask

  // Stimulus sequence
  initial begin
    integer holdN;
    holdN = 150;  // デバウンスN=128を確実に超える

    $display("[%0t] TB start", $time);

    // リセット維持
    repeat (10) @(posedge clk);
    rst <= 1'b0;                   // 外部リセット解除
    repeat (100) @(posedge clk);   // 落ち着くまで待ち

    // len=0 観察
    $display("[%0t] Observe len=0", $time);
    repeat (400) @(posedge clk);

    // len=1
    $display("[%0t] Press #1 -> len=1", $time);
    press_button(holdN);
    repeat (400) @(posedge clk);

    // len=2
    $display("[%0t] Press #2 -> len=2", $time);
    press_button(holdN);
    repeat (400) @(posedge clk);

    // len=3
    $display("[%0t] Press #3 -> len=3", $time);
    press_button(holdN);
    repeat (300) @(posedge clk);

    // len=4
    $display("[%0t] Press #4 -> len=4", $time);
    press_button(holdN);
    repeat (300) @(posedge clk);

    // len=5
    $display("[%0t] Press #5 -> len=5", $time);
    press_button(holdN);
    repeat (600) @(posedge clk);

    $display("[%0t] TB end", $time);
    $finish;
  end

endmodule
